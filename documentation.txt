ТЕСТОВОЕ ЗАДАНИЕ

1. Разработать php-приложение
Приложение должно поддерживать две консольные команды: create_user, update_user.
create_user: создает нового пользователя в БД. Информация о пользователе – name, password, info. Приложение должно принимать эти данные через командную строку при запуске команды. 
update_user: находит пользователя с именем name, обновляет значение поля info. Принимает параметры name,info.

2. Разработать API
Разработать endpoint /get-info/{name}, который находит пользователя с полем name = {name} и возвращает значение поля info. Endpoint должен быстро работать условно независимо от нагрузки, иначе говоря, нужно использовать кеширование. Сделать поддержку кеширования через Redis или memcached, вид кеширования должен регулироваться через конфиг.

============================================================================================================================
РЕШЕНИЕ

1. Через консоль запускаем команды:
	(1. php artisan create_user)

		После запуска вводим имя пользователя, пароль и информацию
			- Enter name: 
			> <какое либо имя>

			- Enter password: 
			> <какой либо пароль>

			- Enter information:
			- <какая либо информация>

		После добавления уведомление 
		Added user <Введенное Вами имя>

	(2. php artisan update_user)

		После запуска вводим имя пользователя
			- Enter name: 
			> <Имя для поиска в БД>

		После правильного ввода имени
			- You selected user <Имя>
			Information - <Информация>
			Enter NEW information:
			> <Вводим новую информацию о пользователе>

		После обновления информации
			- You selected user <Имя>
			updated with information - <Новая информация>


2. Заходим на laravel/get-info, выйдет подсказка "В адресной строке введите /get-info/{name} где {name} имя пользователя"
	
	Вводим - laravel/get-info/{name}, где {name} имя пользователя
	В json-формате выводится информация о пользователе